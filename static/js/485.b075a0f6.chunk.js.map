{"version":3,"file":"static/js/485.b075a0f6.chunk.js","mappings":"6LAEaA,EAAS,WACpB,OACE,0BACE,SAAC,KAAD,CACEC,YAAY,YACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAIhB,C,8LCXYC,EAAYC,EAAAA,GAAAA,IAAH,uFAMTC,EAAOD,EAAAA,GAAAA,GAAH,4LAWJE,EAAOF,EAAAA,GAAAA,GAAH,ofAoBJG,EAAQH,EAAAA,GAAAA,IAAH,kLAWLI,EAAQJ,EAAAA,GAAAA,GAAH,iHAQLK,GAAYL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,kD,SCVtB,EA3Ca,WACT,OAA4BO,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,oGAEZF,GAAa,GAFD,UAGUG,EAAAA,EAAAA,MAHV,OAGNC,EAHM,OAIZR,EAAUQ,GAJE,gDAMZC,QAAQC,IAAI,SANA,yBAQZN,GAAa,GARD,4EAAH,qDAWbE,GACP,GAAE,KAGC,UAAChB,EAAD,YAEI,2CAECa,IAAa,SAACnB,EAAA,EAAD,KAEd,SAACQ,EAAD,UACCO,EAAOY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,KAA3B,OACJ,SAACtB,EAAD,WACA,UAACG,EAAD,CAAYoB,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMjB,GAAhD,WACQ,SAACP,EAAD,CAAOyB,IAAKN,GAAgC,OAAjBA,EAAf,yCACAA,GADA,mDAEkBO,IAAI,MAClC,SAACzB,EAAD,UAAQmB,GAASC,QALdH,EADP,QAavB,C,kMC7CDS,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMf,EAAW,mCAAG,sGACFc,EAAAA,EAAAA,IAAA,qBADE,uBACjBE,EADiB,EACjBA,KADiB,kBAElBA,EAAKC,SAFa,2CAAH,qDAKXC,EAAY,mCAAI,WAAOC,GAAP,yFACNL,EAAAA,EAAAA,IAAA,6BAAgCK,IAD1B,uBACpBH,EADoB,EACpBA,KADoB,kBAEpBA,EAAKC,SAFe,2CAAJ,sDAKZG,EAAe,mCAAG,WAAOC,GAAP,yFACRP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,MADQ,uBACtBL,EADsB,EACtBA,KADsB,kBAEtBA,GAFsB,2CAAH,sDAKfM,EAAe,mCAAG,WAAOD,GAAP,yFACRP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,cADQ,uBACtBL,EADsB,EACtBA,KADsB,kBAEtBA,EAAKO,MAFiB,2CAAH,sDAKfC,EAAe,mCAAG,WAAOH,GAAP,yFACRP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,cADQ,uBACtBL,EADsB,EACtBA,KADsB,kBAEtBA,EAAKC,SAFiB,2CAAH,qD","sources":["components/Loader/Loader.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/api.jsx"],"sourcesContent":["import { RotatingLines } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <div>\n      <RotatingLines\n        strokeColor=\"#3f51b590\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </div>\n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  max-width: 100%;\n  margin-top: 0;\n  margin-left: auto;\n  margin-right: auto;\n  justify-content: center;\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n  background: rgb(255, 255, 255);\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%),\n    0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%);\n  width: 100%;\n  max-width: 200px;\n  margin: 10px;\n  border-radius: 5px;\n  display: inline-block;\n  text-decoration: none;\n  color: black;\n  transition-duration: 300ms;\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.03);\n    box-shadow: rgb(0 0 0 / 8%) 0px 10px 25px;\n  }\n  text-align: center;\n`;\n\nexport const Image = styled.img`\npadding: 0px;\n  margin: 0px;\n  height: 280px;\n  width: 100%;\n  display: block;\n  border-top-left-radius: 5px;\n  border-top-right-radius: 5px;\n  }\n`;\n\nexport const Title = styled.h2`\n  font-weight: 700;\n  color: black;\n  margin: 10px, 0;\n  text-decoration: none;\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n`;\n","import { getTrending } from \"services/api\"\nimport { useState, useEffect } from 'react';\nimport { useLocation } from \"react-router-dom\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { List, Image, Container, Item, Title, MovieLink } from \"./Home.styled\";\n\nconst Home = () => {\n    const [movies, setMovies] = useState([]);\n    const location = useLocation();\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                setIsLoading(true);\n                const response= await getTrending();\n                setMovies(response);\n            } catch (error) {\n                console.log('Error');\n            } finally {\n                setIsLoading(false);\n            }\n            };\n            fetchMovies();\n    }, []);\n    \n    return (\n        <Container >\n\n            <h1>Trending today</h1>\n\n            {isLoading && <Loader />}\n\n            <List>\n            {movies.map(({ id, poster_path, title, name }) => (\n                    <Item key={id}>\n                    <MovieLink  to={`/movies/${id}`} state={{ from: location }}>\n                            <Image src={poster_path && poster_path  !== null\n    ? `https://image.tmdb.org/t/p/w500${poster_path}`\n    : `https://i.ibb.co/Mg2D0bG/no-image-available.webp`} alt=\"\"/>\n                            <Title>{title || name}</Title>\n                    </MovieLink>\n                </Item>\n            ))}\n                </List>\n            </Container>\n    )\n}\n\nexport default Home;","import axios from \"axios\";\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: '089af85f0d558478de1e10d80ce20497',\n};\n\nexport const getTrending = async () => {\n  const { data } = await axios.get(`trending/all/day?`);\n  return data.results;\n};\n\nexport const searchMovies  = async (query) => {\n  const {data} = await axios.get(`search/movie?query=${query}`);\n  return data.results;\n};\n\nexport const getMovieDetails = async (movieId) => {\n  const {data} = await axios.get(`/movie/${movieId}?`);\n  return data;\n};\n\nexport const getMovieCredits = async (movieId) => {\n  const {data} = await axios.get(`/movie/${movieId}/credits?`);\n  return data.cast;\n};\n\nexport const getMovieReviews = async (movieId) => {\n  const {data} = await axios.get(`/movie/${movieId}/reviews?`);\n  return data.results;\n};\n\n\n"],"names":["Loader","strokeColor","strokeWidth","animationDuration","width","visible","Container","styled","List","Item","Image","Title","MovieLink","Link","useState","movies","setMovies","location","useLocation","isLoading","setIsLoading","useEffect","fetchMovies","getTrending","response","console","log","map","id","poster_path","title","name","to","state","from","src","alt","axios","api_key","data","results","searchMovies","query","getMovieDetails","movieId","getMovieCredits","cast","getMovieReviews"],"sourceRoot":""}